{%- import '_macros.j2' as macros with context -%}

{% set config = manala_influxdb_config -%}

{% set config_meta = [] -%}
{% set config_data = [] -%}
{% set config_database = [] -%}
{% set config_hinted_handoff = [] -%}
{% set config_coordinator = [] -%}
{% set config_retention = [] -%}
{% set config_shard_precreation = [] -%}
{% set config_monitor = [] -%}
{% set config_admin = [] -%}
{% set config_http = [] -%}
{% set config_subscriber = [] -%}
{% set config_graphite = [] -%}
{% set config_collectd = [] -%}
{% set config_opentsdb = [] -%}
{% set config_udp = [] -%}
{% set config_continuous_queries = [] -%}

{%- for configs in config -%}
    {%- for config_name, config_parameters in configs.iteritems() -%}
        {%- if config_name == 'meta' -%}
            {%- if config_meta.extend(config_parameters) -%}{%- endif -%}
        {%- elif config_name == 'data' -%}
            {%- if config_data.extend(config_parameters) -%}{%- endif -%}
        {%- elif config_name == 'database' -%}
            {%- if config_database.extend(config_parameters) -%}{%- endif -%}
        {%- elif config_name == 'hinted_handoff' -%}
            {%- if config_hinted_handoff.extend(config_parameters) -%}{%- endif -%}
        {%- elif config_name == 'coordinator' -%}
            {%- if config_coordinator.extend(config_parameters) -%}{%- endif -%}
        {%- elif config_name == 'retention' -%}
            {%- if config_retention.extend(config_parameters) -%}{%- endif -%}
        {%- elif config_name == 'shard_precreation' -%}
            {%- if config_shard_precreation.extend(config_parameters) -%}{%- endif -%}
        {%- elif config_name == 'monitor' -%}
            {%- if config_monitor.extend(config_parameters) -%}{%- endif -%}
        {%- elif config_name == 'admin' -%}
            {%- if config_admin.extend(config_parameters) -%}{%- endif -%}
        {%- elif config_name == 'http' -%}
            {%- if config_http.extend(config_parameters) -%}{%- endif -%}
        {%- elif config_name == 'subscriber' -%}
            {%- if config_subscriber.extend(config_parameters) -%}{%- endif -%}
        {%- elif config_name == 'auth.graphite' -%}
            {%- if config_graphite.extend(config_parameters) -%}{%- endif -%}
        {%- elif config_name == 'collectd' -%}
            {%- if config_collectd.extend(config_parameters) -%}{%- endif -%}
        {%- elif config_name == 'udp' -%}
            {%- if config_udp.extend(config_parameters) -%}{%- endif -%}
        {%- elif config_name == 'continuous_queries' -%}
            {%- if config_continuous_queries.extend(config_parameters) -%}{%- endif -%}
        {%- endif -%}
    {%- endfor -%}
{%- endfor -%}
### Welcome to the InfluxDB configuration file.

# The values in this file override the default values used by the system if
# a config option is not specified.  The commented out lines are the the configuration
# field and the default value used.  Uncommentting a line and changing the value
# will change the value used at runtime when the process is restarted.

# Once every 24 hours InfluxDB will report usage data to usage.influxdata.com
# The data includes a random ID, os, arch, version, the number of series and other
# usage data. No data from user databases is ever transmitted.
# Change this option to true to disable reporting.
{{ macros.config_row(config, 'reporting-disabled', '# reporting-disabled = false', 0, true) }}

# we'll try to get the hostname automatically, but if it the os returns something
# that isn't resolvable by other servers in the cluster, use this option to
# manually set the hostname
{{ macros.config_row(config, 'hostname', '# hostname = "localhost"', 0, true) }}

###
### [meta]
###
### Controls the parameters for the Raft consensus group that stores metadata
### about the InfluxDB cluster.
###

{% if not config_meta|length %}# {% endif %}[meta]
  # Where the metadata/raft database is stored
  {{ macros.config_row(config_meta, 'dir', '/var/lib/influxdb/meta') }}

  # Automatically create a default retention policy when creating a database.
  {{ macros.config_row(config_meta, 'retention-autocreate', '# retention-autocreate = true', 0, true) }}

  # If log messages are printed for the meta service
  {{ macros.config_row(config_meta, 'logging-enabled', '# logging-enabled = true', 0, true) }}

###
### [data]
###
### Controls where the actual shard data for InfluxDB lives and how it is
### flushed from the WAL. "dir" may need to be changed to a suitable place
### for your system, but the WAL settings are an advanced configuration. The
### defaults should work for most systems.
###

{% if not config_data|length %}# {% endif %}[data]
  # The directory where the TSM storage engine stores TSM files.
  {{ macros.config_row(config_data, 'dir', '/var/lib/influxdb/data') }}

  # The directory where the TSM storage engine stores WAL files.
  {{ macros.config_row(config_data, 'wal-dir', '/var/lib/influxdb/wal') }}

  # Trace logging provides more verbose output around the tsm engine. Turning
  # this on can provide more useful output for debugging tsm engine issues.
  {{ macros.config_row(config_data, 'trace-logging-enabled', '# trace-logging-enabled = false', 0, true) }}

  # Whether queries should be logged before execution. Very useful for troubleshooting, but will
  # log any sensitive data contained within a query.
  {{ macros.config_row(config_data, 'query-log-enabled', '# query-log-enabled = true', 0, true) }}

  # Settings for the TSM engine

  # CacheMaxMemorySize is the maximum size a shard's cache can
  # reach before it starts rejecting writes.
  {{ macros.config_row(config_data, 'cache-max-memory-size', '# cache-max-memory-size = 1048576000', 0, true) }}

  # CacheSnapshotMemorySize is the size at which the engine will
  # snapshot the cache and write it to a TSM file, freeing up memory
  {{ macros.config_row(config_data, 'cache-snapshot-memory-size', '# cache-snapshot-memory-size = 26214400', 0, true) }}

  # CacheSnapshotWriteColdDuration is the length of time at
  # which the engine will snapshot the cache and write it to
  # a new TSM file if the shard hasn't received writes or deletes
  {{ macros.config_row(config_data, 'cache-snapshot-write-cold-duration', '# cache-snapshot-write-cold-duration = "10m"', 0, true) }}

  # CompactFullWriteColdDuration is the duration at which the engine
  # will compact all TSM files in a shard if it hasn't received a
  # write or delete
  {{ macros.config_row(config_data, 'compact-full-write-cold-duration', '# compact-full-write-cold-duration = "4h"', 0, true) }}

  # The maximum series allowed per database before writes are dropped.  This limit can prevent
  # high cardinality issues at the database level.  This limit can be disabled by setting it to
  # 0.
  {{ macros.config_row(config_data, 'max-series-per-database', '# max-series-per-database = 1000000', 0, true) }}

  # The maximum number of tag values per tag that are allowed before writes are dropped.  This limit
  # can prevent high cardinality tag values from being written to a measurement.  This limit can be
  # disabled by setting it to 0.
  {{ macros.config_row(config_data, 'max-values-per-tag', '# max-values-per-tag = 100000', 0, true) }}

###
### [coordinator]
###
### Controls the clustering service configuration.
###

{% if not config_coordinator|length %}# {% endif %}[coordinator]
  # The default time a write request will wait until a "timeout" error is returned to the caller.
  {{ macros.config_row(config_coordinator, 'write-timeout', '# write-timeout = "10s"', 0, true) }}

  # The maximum number of concurrent queries allowed to be executing at one time.  If a query is
  # executed and exceeds this limit, an error is returned to the caller.  This limit can be disabled
  # by setting it to 0.
  {{ macros.config_row(config_coordinator, 'max-concurrent-queries', '# max-concurrent-queries = 0', 0, true) }}

  # The maximum time a query will is allowed to execute before being killed by the system.  This limit
  # can help prevent run away queries.  Setting the value to 0 disables the limit.
  {{ macros.config_row(config_coordinator, 'query-timeout', '# query-timeout = "0s"', 0, true) }}

  # The the time threshold when a query will be logged as a slow query.  This limit can be set to help
  # discover slow or resource intensive queries.  Setting the value to 0 disables the slow query logging.
  {{ macros.config_row(config_coordinator, 'log-queries-after', '# log-queries-after = "0s"', 0, true) }}

  # The maximum number of points a SELECT can process.  A value of 0 will make the maximum
  # point count unlimited.
  {{ macros.config_row(config_coordinator, 'max-select-point', '# max-select-point = 0', 0, true) }}

  # The maximum number of series a SELECT can run.  A value of 0 will make the maximum series
  # count unlimited.

  # The maximum number of series a SELECT can run. A value of zero will make the maximum series
  # count unlimited.
  {{ macros.config_row(config_coordinator, 'max-select-series', '# max-select-series = 0', 0, true) }}

  # The maxium number of group by time bucket a SELECt can create.  A value of zero will max the maximum
  # number of buckets unlimited.
  {{ macros.config_row(config_coordinator, 'max-select-buckets', '# max-select-buckets = 0', 0, true) }}

###
### [retention]
###
### Controls the enforcement of retention policies for evicting old data.
###

{% if not config_retention|length %}# {% endif %}[retention]
  # Determines whether retention policy enforcment enabled.
  {{ macros.config_row(config_retention, 'enabled', '# enabled = true', 0, true) }}

  # The interval of time when retention policy enforcement checks run.
  {{ macros.config_row(config_retention, 'check-interval', '# check-interval = "30m"', 0, true) }}

###
### [shard-precreation]
###
### Controls the precreation of shards, so they are available before data arrives.
### Only shards that, after creation, will have both a start- and end-time in the
### future, will ever be created. Shards are never precreated that would be wholly
### or partially in the past.

{% if not config_shard_precreation|length %}# {% endif %}[shard-precreation]
  # Determines whether shard pre-creation service is enabled.
  {{ macros.config_row(config_shard_precreation, 'enabled', '# enabled = true', 0, true) }}

  # The interval of time when the check to pre-create new shards runs.
  {{ macros.config_row(config_shard_precreation, 'check-interval', '# check-interval = "10m"', 0, true) }}

  # The default period ahead of the endtime of a shard group that its successor
  # group is created.
  {{ macros.config_row(config_shard_precreation, 'advance-period', '# advance-period = "30m"', 0, true) }}

###
### Controls the system self-monitoring, statistics and diagnostics.
###
### The internal database for monitoring data is created automatically if
### if it does not already exist. The target retention within this database
### is called 'monitor' and is also created with a retention period of 7 days
### and a replication factor of 1, if it does not exist. In all cases the
### this retention policy is configured as the default for the database.

{% if not config_monitor|length %}# {% endif %}[monitor]
  # Whether to record statistics internally.
  {{ macros.config_row(config_monitor, 'store-enabled', '# store-enabled = true', 0, true) }}

  # The destination database for recorded statistics
  {{ macros.config_row(config_monitor, 'store-database', '# store-database = "_internal"', 0, true) }}

  # The interval at which to record statistics
  {{ macros.config_row(config_monitor, 'store-interval', '# store-interval = "10s"', 0, true) }}

###
### [admin]
###
### Controls the availability of the built-in, web-based admin interface. If HTTPS is
### enabled for the admin interface, HTTPS must also be enabled on the [http] service.
###
### NOTE: This interface is deprecated as of 1.1.0 and will be removed in a future release.

{% if not config_admin|length %}# {% endif %}[admin]
  # Determines whether the admin service is enabled.
  {{ macros.config_row(config_admin, 'enabled', '# enabled = false', 0, true) }}

  # The default bind address used by the admin service.
  {{ macros.config_row(config_admin, 'bind-address', '# bind-address = ":8083"', 0, true) }}

  # Whether the admin service should use HTTPS.
  {{ macros.config_row(config_admin, 'https-enabled', '# https-enabled = false', 0, true) }}

  # The SSL certificate used when HTTPS is enabled.
  {{ macros.config_row(config_admin, 'https-certificate', '# https-certificate = "/etc/ssl/influxdb.pem"', 0, true) }}

###
### [http]
###
### Controls how the HTTP endpoints are configured. These are the primary
### mechanism for getting data into and out of InfluxDB.
###

{% if not config_http|length %}# {% endif %}[http]
  # Determines whether HTTP endpoint is enabled.
  {{ macros.config_row(config_http, 'enabled', '# enabled = true', 0, true) }}

  # The bind address used by the HTTP service.
  {{ macros.config_row(config_http, 'bind-address', '# bind-address = ":8086"', 0, true) }}

  # Determines whether HTTP authentication is enabled.
  {{ macros.config_row(config_http, 'auth-enabled', '# auth-enabled = false', 0, true) }}

  # The default realm sent back when issuing a basic auth challenge.
  {{ macros.config_row(config_http, 'realm', '# realm = "InfluxDB"', 0, true) }}

  # Determines whether HTTP request logging is enable.d
  {{ macros.config_row(config_http, 'log-enabled', '# log-enabled = true', 0, true) }}

  # Determines whether detailed write logging is enabled.
  {{ macros.config_row(config_http, 'write-tracing', '# write-tracing = false', 0, true) }}

  # Determines whether the pprof endpoint is enabled.  This endpoint is used for
  # troubleshooting and monitoring.
  {{ macros.config_row(config_http, 'pprof-enabled', '# pprof-enabled = true', 0, true) }}

  # Determines whether HTTPS is enabled.
  {{ macros.config_row(config_http, 'https-enabled', '# https-enabled = false', 0, true) }}

  # The SSL certificate to use when HTTPS is enabled.
  {{ macros.config_row(config_http, 'https-certificate', '# https-certificate = "/etc/ssl/influxdb.pem"', 0, true) }}

  # Use a separate private key location.
  {{ macros.config_row(config_http, 'https-private-key', '# https-private-key = ""', 0, true) }}

  # The JWT auth shared secret to validate requests using JSON web tokens.
  {{ macros.config_row(config_http, 'shared-sercret', '# shared-sercret = ""', 0, true) }}

  # The default chunk size for result sets that should be chunked.
  {{ macros.config_row(config_http, 'max-row-limit', '# max-row-limit = 10000', 0, true) }}

  # The maximum number of HTTP connections that may be open at once.  New connections that
  # would exceed this limit are dropped.  Setting this value to 0 disables the limit.
  {{ macros.config_row(config_http, 'max-connection-limit', '# max-connection-limit = 0', 0, true) }}

  # Enable http service over unix domain socket
  {{ macros.config_row(config_http, 'unix-socket-enabled', '# unix-socket-enabled = false', 0, true) }}

  # The path of the unix domain socket.
  {{ macros.config_row(config_http, 'bind-socket', '# bind-socket = "/var/run/influxdb.sock"', 0, true) }}

###
### [subscriber]
###
### Controls the subscriptions, which can be used to fork a copy of all data
### received by the InfluxDB host.
###

{% if not config_subscriber|length %}# {% endif %}[subscriber]
  # Determines whether the subscriber service is enabled.
  {{ macros.config_row(config_subscriber, 'enabled', '# enabled = true', 0, true) }}

  # The default timeout for HTTP writes to subscribers.
  {{ macros.config_row(config_subscriber, 'http-timeout', '# http-timeout = "30s"', 0, true) }}

  # Allows insecure HTTPS connections to subscribers.  This is useful when testing with self-
  # signed certificates.
  {{ macros.config_row(config_subscriber, 'insecure-skip-verify', '# insecure-skip-verify = false', 0, true) }}

  # The path to the PEM encoded CA certs file. If the empty string, the default system certs will be used
  {{ macros.config_row(config_subscriber, 'ca-certs', '# ca-certs = ""', 0, true) }}

  # The number of writer goroutines processing the write channel.
  {{ macros.config_row(config_subscriber, 'write-concurrency', '# write-concurrency = 40', 0, true) }}

  # The number of in-flight writes buffered in the write channel.
  {{ macros.config_row(config_subscriber, 'write-buffer-size', '# write-buffer-size = 1000', 0, true) }}


###
### [[graphite]]
###
### Controls one or many listeners for Graphite data.
###

{% if not config_graphite|length %}# {% endif %}[[graphite]]
  # Determines whether the graphite endpoint is enabled.
  {{ macros.config_row(config_graphite, 'enabled', '# enabled = false', 0, true) }}
  {{ macros.config_row(config_graphite, 'database', '# database = "graphite"', 0, true) }}
  {{ macros.config_row(config_graphite, 'retention-policy', '# retention-policy = ""', 0, true) }}
  {{ macros.config_row(config_graphite, 'bind-address', '# bind-address = ":2003"', 0, true) }}
  {{ macros.config_row(config_graphite, 'protocol', '# protocol = "tcp"', 0, true) }}
  {{ macros.config_row(config_graphite, 'consistency-level', '# consistency-level = "one"', 0, true) }}

  # These next lines control how batching works. You should have this enabled
  # otherwise you could get dropped metrics or poor performance. Batching
  # will buffer points in memory if you have many coming in.

  # Flush if this many points get buffered
  {{ macros.config_row(config_graphite, 'batch-size', '# batch-size = 5000', 0, true) }}

  # number of batches that may be pending in memory
  {{ macros.config_row(config_graphite, 'batch-pending', '# batch-pending = 10', 0, true) }}

  # Flush at least this often even if we haven't hit buffer limit
  {{ macros.config_row(config_graphite, 'batch-timeout', '# batch-timeout = "1s"', 0, true) }}

  # UDP Read buffer size, 0 means OS default. UDP listener will fail if set above OS max.
  {{ macros.config_row(config_graphite, 'udp-read-buffer', '# udp-read-buffer = 0', 0, true) }}

  ### This string joins multiple matching 'measurement' values providing more control over the final measurement name.
  {{ macros.config_row(config_graphite, 'separator', '# separator = "."', 0, true) }}

  ### Default tags that will be added to all metrics.  These can be overridden at the template level
  ### or by tags extracted from metric
  {{ macros.config_row(config_graphite, 'tags', '# tags = ["region=us-east", "zone=1c"]', 0, true) }}

  ### Each template line requires a template pattern.  It can have an optional
  ### filter before the template and separated by spaces.  It can also have optional extra
  ### tags following the template.  Multiple tags should be separated by commas and no spaces
  ### similar to the line protocol format.  There can be only one default template.
  {{ macros.config_row(config_graphite, 'templates', '# templates = [
  #   "*.app env.service.resource.measurement",
  #   # Default template
  #   "server.*",
  # ]', 0, true) }}

###
### [collectd]
###
### Controls one or many listeners for collectd data.
###

{% if not config_collectd|length %}# {% endif %}[[collectd]]
  {{ macros.config_row(config_collectd, 'enabled', '# enabled = false', 0, true) }}
  {{ macros.config_row(config_collectd, 'bind-address', '# bind-address = ":25826"', 0, true) }}
  {{ macros.config_row(config_collectd, 'database', '# database = "collectd"', 0, true) }}
  {{ macros.config_row(config_collectd, 'retention-policy', '# retention-policy = ""', 0, true) }}
  {{ macros.config_row(config_collectd, 'typesdb', '# typesdb = "/usr/share/collectd/types.db"', 0, true) }}
  {{ macros.config_row(config_collectd, 'security-level', '# security-level = "none"', 0, true) }}
  {{ macros.config_row(config_collectd, 'auth-file', '# auth-file = "/etc/collectd/auth_file"', 0, true) }}

  # These next lines control how batching works. You should have this enabled
  # otherwise you could get dropped metrics or poor performance. Batching
  # will buffer points in memory if you have many coming in.

  # Flush if this many points get buffered
  {{ macros.config_row(config_collectd, 'batch-size', '# batch-size = 5000', 0, true) }}

  # Number of batches that may be pending in memory
  {{ macros.config_row(config_collectd, 'batch-pending', '# batch-pending = 10', 0, true) }}

  # Flush at least this often even if we haven't hit buffer limit
  {{ macros.config_row(config_collectd, 'batch-timeout', '# batch-timeout = "10s"', 0, true) }}

  # UDP Read buffer size, 0 means OS default. UDP listener will fail if set above OS max.
  {{ macros.config_row(config_collectd, 'read-buffer', '# read-buffer = 0', 0, true) }}

###
### [opentsdb]
###
### Controls one or many listeners for OpenTSDB data.
###

{% if not config_opentsdb|length %}# {% endif %}[[opentsdb]]
  {{ macros.config_row(config_opentsdb, 'enabled', '# enabled = false', 0, true) }}
  {{ macros.config_row(config_opentsdb, 'bind-address', '# bind-address = ":4242"', 0, true) }}
  {{ macros.config_row(config_opentsdb, 'database', '# database = "opentsdb"', 0, true) }}
  {{ macros.config_row(config_opentsdb, 'retention-policy', '# retention-policy = ""', 0, true) }}
  {{ macros.config_row(config_opentsdb, 'consistency-level', '# consistency-level = "one"', 0, true) }}
  {{ macros.config_row(config_opentsdb, 'tls-enabled', '# tls-enabled = false', 0, true) }}
  {{ macros.config_row(config_opentsdb, 'certificate', '# certificate = "/etc/ssl/influxdb.pem"', 0, true) }}

  # Log an error for every malformed point.
  {{ macros.config_row(config_opentsdb, 'log-point-errors', '# log-point-errors = true', 0, true) }}

  # These next lines control how batching works. You should have this enabled
  # otherwise you could get dropped metrics or poor performance. Only points
  # metrics received over the telnet protocol undergo batching.

  # Flush if this many points get buffered
  {{ macros.config_row(config_opentsdb, 'batch-size', '# batch-size = 1000', 0, true) }}

  # Number of batches that may be pending in memory
  {{ macros.config_row(config_opentsdb, 'batch-pending', '# batch-pending = 5', 0, true) }}

  # Flush at least this often even if we haven't hit buffer limit
  {{ macros.config_row(config_opentsdb, 'batch-timeout', '# batch-timeout = "1s"', 0, true) }}

###
### [[udp]]
###
### Controls the listeners for InfluxDB line protocol data via UDP.
###

{% if not config_udp|length %}# {% endif %}[[udp]]
  {{ macros.config_row(config_udp, 'enabled', '# enabled = false', 0, true) }}
  {{ macros.config_row(config_udp, 'bind-address', '# bind-address = ":8089"', 0, true) }}
  {{ macros.config_row(config_udp, 'database', '# database = "udp"', 0, true) }}
  {{ macros.config_row(config_udp, 'retention-policy', '# retention-policy = ""', 0, true) }}

  # These next lines control how batching works. You should have this enabled
  # otherwise you could get dropped metrics or poor performance. Batching
  # will buffer points in memory if you have many coming in.

  # Flush if this many points get buffered
  {{ macros.config_row(config_udp, 'batch-size', '# batch-size = 5000', 0, true) }}

  # Number of batches that may be pending in memory
  {{ macros.config_row(config_udp, 'batch-pending', '# batch-pending = 10', 0, true) }}

  # Will flush at least this often even if we haven't hit buffer limit
  {{ macros.config_row(config_udp, 'batch-timeout', '# batch-timeout = "1s"', 0, true) }}

  # UDP Read buffer size, 0 means OS default. UDP listener will fail if set above OS max.
  {{ macros.config_row(config_udp, 'read-buffer', '# read-buffer = 0', 0, true) }}

###
### [continuous_queries]
###
### Controls how continuous queries are run within InfluxDB.
###

{% if not config_continuous_queries|length %}# {% endif %}[continuous_queries]
  # Determiens whether the continuous query service is enabled.
  {{ macros.config_row(config_continuous_queries, 'enabled', '# enabled = true', 0, true) }}

  # Controls whether queries are logged when executed by the CQ service.
  {{ macros.config_row(config_continuous_queries, 'log-enabled', '# log-enabled = true', 0, true) }}

  # interval for how often continuous queries will be checked if they need to run
  {{ macros.config_row(config_continuous_queries, 'run-interval', '# run-interval = "1s"', 0, true) }}
